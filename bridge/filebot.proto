// FileBot gRPC Service Definition
// Cross-language bridge protocol for high-performance healthcare MUMPS operations
//
// This protocol enables Ruby, Java, and Python implementations to communicate
// efficiently while maintaining the 6.96x performance improvement over Legacy FileMan.

syntax = "proto3";

package filebot.v1;

option java_package = "com.lakeraven.filebot.grpc.v1";
option java_outer_classname = "FileBotProto";
option go_package = "github.com/lakeraven/filebot/grpc/v1;filebotv1";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// ==================== Core FileBot Service ====================

service FileBotService {
  // Patient Operations
  rpc GetPatientDemographics(GetPatientRequest) returns (Patient);
  rpc SearchPatientsByName(SearchPatientsRequest) returns (PatientList);
  rpc CreatePatient(CreatePatientRequest) returns (CreateResult);
  rpc GetPatientsBatch(GetPatientsBatchRequest) returns (PatientList);
  rpc ValidatePatient(ValidatePatientRequest) returns (ValidationResult);
  
  // FileMan Operations
  rpc FindEntries(FindEntriesRequest) returns (FindResult);
  rpc ListEntries(ListEntriesRequest) returns (FindResult);
  rpc DeleteEntry(DeleteEntryRequest) returns (OperationResult);
  rpc LockEntry(LockEntryRequest) returns (OperationResult);
  rpc UnlockEntry(UnlockEntryRequest) returns (OperationResult);
  rpc GetsEntry(GetsEntryRequest) returns (EntryData);
  rpc UpdateEntry(UpdateEntryRequest) returns (OperationResult);
  
  // Healthcare Workflows
  rpc MedicationOrderingWorkflow(MedicationWorkflowRequest) returns (WorkflowResult);
  rpc LabResultEntryWorkflow(LabWorkflowRequest) returns (WorkflowResult);
  rpc ClinicalDocumentationWorkflow(DocumentWorkflowRequest) returns (WorkflowResult);
  rpc DischargeSummaryWorkflow(SummaryWorkflowRequest) returns (WorkflowResult);
  
  // Adapter Management
  rpc GetAdapterInfo(google.protobuf.Empty) returns (AdapterInfo);
  rpc TestConnection(google.protobuf.Empty) returns (ConnectionResult);
  rpc SwitchAdapter(SwitchAdapterRequest) returns (OperationResult);
  rpc GetAvailableAdapters(google.protobuf.Empty) returns (AdapterList);
  
  // Global Operations (Low-level)
  rpc GetGlobal(GlobalRequest) returns (GlobalResponse);
  rpc SetGlobal(SetGlobalRequest) returns (OperationResult);
  rpc OrderGlobal(GlobalRequest) returns (GlobalResponse);
  rpc DataGlobal(GlobalRequest) returns (DataGlobalResponse);
}

// ==================== Data Models ====================

// Patient data structure
message Patient {
  string dfn = 1;
  string name = 2;
  string sex = 3;
  string dob = 4;
  string ssn = 5;
  Address address = 6;
  map<string, string> metadata = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

// Patient address
message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string zip = 4;
  string country = 5;
}

// Generic operation result
message OperationResult {
  bool success = 1;
  string message = 2;
  string error_code = 3;
  map<string, string> metadata = 4;
  google.protobuf.Timestamp timestamp = 5;
}

// Patient creation result
message CreateResult {
  bool success = 1;
  string dfn = 2;
  string message = 3;
  string error_code = 4;
  map<string, string> metadata = 5;
  google.protobuf.Timestamp timestamp = 6;
}

// Validation result
message ValidationResult {
  bool success = 1;
  repeated string errors = 2;
  repeated string warnings = 3;
  map<string, string> field_errors = 4;
}

// Search/find result
message FindResult {
  bool success = 1;
  repeated EntryResult results = 2;
  int32 count = 3;
  string error_code = 4;
  string message = 5;
  bool has_more = 6;
  string continuation_token = 7;
}

// Individual entry result
message EntryResult {
  string ien = 1;
  map<string, string> fields = 2;
  string display_value = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

// Entry data with formatting
message EntryData {
  bool success = 1;
  string ien = 2;
  map<string, string> data = 3;
  map<string, string> formatted_data = 4;
  string error_code = 5;
  string message = 6;
}

// Healthcare workflow result
message WorkflowResult {
  bool success = 1;
  string workflow_id = 2;
  string workflow_type = 3;
  map<string, string> data = 4;
  repeated WorkflowStep steps = 5;
  string error_code = 6;
  string message = 7;
  google.protobuf.Timestamp completed_at = 8;
}

// Workflow step
message WorkflowStep {
  string step_id = 1;
  string step_name = 2;
  string status = 3; // pending, in_progress, completed, failed
  map<string, string> data = 4;
  google.protobuf.Timestamp started_at = 5;
  google.protobuf.Timestamp completed_at = 6;
}

// Adapter information
message AdapterInfo {
  string type = 1;
  string version = 2;
  string database_version = 3;
  Capabilities capabilities = 4;
  bool connected = 5;
  ConnectionStatus connection_status = 6;
  map<string, string> metadata = 7;
}

// Adapter capabilities
message Capabilities {
  bool transactions = 1;
  bool locking = 2;
  bool mumps_execution = 3;
  bool concurrent_access = 4;
  bool cross_references = 5;
  bool unicode_support = 6;
}

// Connection status
message ConnectionStatus {
  bool connected = 1;
  string status_message = 2;
  google.protobuf.Timestamp last_check = 3;
  int32 connection_pool_size = 4;
  int32 active_connections = 5;
}

// Connection test result
message ConnectionResult {
  bool success = 1;
  string message = 2;
  int32 latency_ms = 3;
  map<string, string> details = 4;
  google.protobuf.Timestamp timestamp = 5;
}

// Available adapters list
message AdapterList {
  repeated AdapterSummary adapters = 1;
}

// Adapter summary
message AdapterSummary {
  string name = 1;
  string description = 2;
  string version = 3;
  int32 priority = 4;
  bool available = 5;
  bool auto_detect = 6;
}

// Global operation request
message GlobalRequest {
  string global = 1;
  repeated string subscripts = 2;
}

// Global operation response
message GlobalResponse {
  bool success = 1;
  string value = 2;
  string error_code = 3;
  string message = 4;
}

// Set global request
message SetGlobalRequest {
  string value = 1;
  string global = 2;
  repeated string subscripts = 3;
}

// Data global response
message DataGlobalResponse {
  bool success = 1;
  int32 data_status = 2; // 0=undefined, 1=data, 10=descendants, 11=both
  string error_code = 3;
  string message = 4;
}

// ==================== Request Messages ====================

// Get patient demographics request
message GetPatientRequest {
  string dfn = 1;
  bool include_metadata = 2;
}

// Search patients request
message SearchPatientsRequest {
  string name_pattern = 1;
  int32 max_results = 2;
  bool exact_match = 3;
  repeated string fields = 4;
}

// Create patient request
message CreatePatientRequest {
  map<string, string> patient_data = 1;
  bool validate_only = 2;
  string created_by = 3;
}

// Get patients batch request
message GetPatientsBatchRequest {
  repeated string dfn_list = 1;
  repeated string fields = 2;
  bool include_metadata = 3;
}

// Validate patient request
message ValidatePatientRequest {
  map<string, string> patient_data = 1;
  bool strict_validation = 2;
}

// Find entries request
message FindEntriesRequest {
  int32 file_number = 1;
  string search_value = 2;
  string search_field = 3;
  string flags = 4;
  int32 max_results = 5;
  string continuation_token = 6;
}

// List entries request
message ListEntriesRequest {
  int32 file_number = 1;
  string start_from = 2;
  string fields = 3;
  int32 max_results = 4;
  string screen = 5;
  string continuation_token = 6;
}

// Delete entry request
message DeleteEntryRequest {
  int32 file_number = 1;
  string ien = 2;
  string deleted_by = 3;
  string reason = 4;
}

// Lock entry request
message LockEntryRequest {
  int32 file_number = 1;
  string ien = 2;
  int32 timeout = 3;
  string locked_by = 4;
}

// Unlock entry request
message UnlockEntryRequest {
  int32 file_number = 1;
  string ien = 2;
  string unlocked_by = 3;
}

// Gets entry request
message GetsEntryRequest {
  int32 file_number = 1;
  string ien = 2;
  string fields = 3;
  string flags = 4;
}

// Update entry request
message UpdateEntryRequest {
  int32 file_number = 1;
  string ien = 2;
  map<string, string> field_data = 3;
  string updated_by = 4;
  string reason = 5;
}

// Switch adapter request
message SwitchAdapterRequest {
  string adapter_type = 1;
  map<string, string> config = 2;
}

// ==================== Healthcare Workflow Requests ====================

// Medication workflow request
message MedicationWorkflowRequest {
  string patient_id = 1;
  MedicationData medication = 2;
  string provider_id = 3;
  string location_id = 4;
}

// Medication data
message MedicationData {
  string medication_name = 1;
  string dose = 2;
  string route = 3;
  string frequency = 4;
  string duration = 5;
  string instructions = 6;
  repeated string allergies_checked = 7;
  repeated string interactions_checked = 8;
}

// Lab workflow request
message LabWorkflowRequest {
  string patient_id = 1;
  LabData lab_data = 2;
  string provider_id = 3;
  string lab_id = 4;
}

// Lab data
message LabData {
  string test_name = 1;
  string result_value = 2;
  string unit = 3;
  string reference_range = 4;
  string status = 5; // preliminary, final, corrected
  google.protobuf.Timestamp collected_at = 6;
  google.protobuf.Timestamp resulted_at = 7;
}

// Document workflow request
message DocumentWorkflowRequest {
  string patient_id = 1;
  DocumentData document = 2;
  string provider_id = 3;
  string encounter_id = 4;
}

// Document data
message DocumentData {
  string document_type = 1;
  string title = 2;
  string content = 3;
  string status = 4; // draft, completed, amended, signed
  repeated string attachments = 5;
  google.protobuf.Timestamp authored_at = 6;
}

// Summary workflow request
message SummaryWorkflowRequest {
  string patient_id = 1;
  SummaryData summary = 2;
  string provider_id = 3;
  string encounter_id = 4;
}

// Summary data
message SummaryData {
  string admission_date = 1;
  string discharge_date = 2;
  string discharge_disposition = 3;
  repeated string diagnoses = 4;
  repeated string procedures = 5;
  repeated string medications = 6;
  string summary_text = 7;
  repeated string follow_up_instructions = 8;
}

// ==================== Collections ====================

// Patient list
message PatientList {
  repeated Patient patients = 1;
  int32 total_count = 2;
  bool has_more = 3;
  string continuation_token = 4;
}