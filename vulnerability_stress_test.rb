#!/usr/bin/env jruby

# FileBot Vulnerability & Stress Testing Suite
#
# Comprehensive security and reliability testing designed to expose
# potential vulnerabilities in FileBot's IRIS integration and healthcare workflows.
# 
# This test suite actively tries to break FileBot to ensure production readiness.

require_relative 'lib/filebot'
require 'timeout'
require 'json'

class VulnerabilityStressTest
  MAX_TEST_TIME = 30  # seconds per test
  STRESS_ITERATIONS = 1000
  
  def initialize
    @filebot = setup_filebot
    @vulnerabilities_found = []
    @stress_failures = []
    @security_issues = []
  end
  
  def run_all_tests
    puts "üîí FileBot Vulnerability & Stress Testing Suite"
    puts "=" * 50
    puts "‚ö†Ô∏è  WARNING: This test suite actively tries to break FileBot"
    puts "   Only run on test systems with backup data"
    puts "=" * 50
    puts
    
    # Security Vulnerability Tests
    security_tests
    
    # Input Validation Tests  
    input_validation_tests
    
    # Injection Attack Tests
    injection_tests
    
    # Memory & Resource Tests
    memory_stress_tests
    
    # Concurrency & Race Condition Tests
    concurrency_tests
    
    # Error Handling Tests
    error_handling_tests
    
    # Performance Degradation Tests
    performance_degradation_tests
    
    # Healthcare Data Integrity Tests
    data_integrity_tests
    
    generate_vulnerability_report
  end
  
  private
  
  def setup_filebot
    FileBot.new(:iris, {
      iris_host: ENV['IRIS_HOST'] || 'localhost',
      iris_port: (ENV['IRIS_PORT'] || '1972').to_i,
      iris_namespace: ENV['IRIS_NAMESPACE'] || 'USER',
      iris_username: ENV['IRIS_USERNAME'] || '_SYSTEM',
      iris_password: ENV['IRIS_PASSWORD'] || raise("IRIS_PASSWORD required for vulnerability testing")
    })
  rescue => e
    puts "‚ùå Cannot establish FileBot connection for vulnerability testing: #{e.message}"
    exit 1
  end
  
  def vulnerability_test(name, severity: :medium)
    print "#{name.ljust(45)} "
    
    begin
      Timeout::timeout(MAX_TEST_TIME) do
        yield
      end
      puts "‚úÖ SECURE"
    rescue => e
      case severity
      when :critical
        puts "üö® CRITICAL VULNERABILITY: #{e.message}"
        @vulnerabilities_found << { name: name, severity: :critical, error: e.message }
      when :high  
        puts "‚ö†Ô∏è  HIGH RISK: #{e.message}"
        @vulnerabilities_found << { name: name, severity: :high, error: e.message }
      when :medium
        puts "‚ö†Ô∏è  MEDIUM RISK: #{e.message}" 
        @vulnerabilities_found << { name: name, severity: :medium, error: e.message }
      when :low
        puts "üí° LOW RISK: #{e.message}"
        @vulnerabilities_found << { name: name, severity: :low, error: e.message }
      end
    rescue Timeout::Error
      puts "‚è±Ô∏è  TIMEOUT - Potential DoS vulnerability"
      @vulnerabilities_found << { name: name, severity: :high, error: "Test timeout - potential DoS" }
    end
  end
  
  def security_tests
    puts "\nüîí Security Vulnerability Tests"
    puts "-" * 35
    
    vulnerability_test("SQL Injection in Patient Search", severity: :critical) do
      malicious_queries = [
        "'; DROP TABLE ^DPT; --",
        "1' UNION SELECT password FROM users --",
        "'; DELETE FROM ^DPT WHERE 1=1; --",
        "\"; DROP GLOBAL ^DPT; \"",
        "1' OR '1'='1' --"
      ]
      
      malicious_queries.each do |query|
        result = @filebot.search_patients_by_name(query)
        # Should return empty or safe results, never execute malicious code
        raise "Potential SQL injection" if result.to_s.include?("DROP") || result.to_s.include?("DELETE")
      end
    end
    
    vulnerability_test("MUMPS Code Injection", severity: :critical) do
      malicious_mumps = [
        "W \"HACKED\"; S ^SECURITY=\"COMPROMISED\"",
        "K ^DPT",  # Kill entire patient file
        "F I=1:1:1000 S ^SPAM(I)=\"ATTACK\"",  # Resource exhaustion
        "X \"S $ZT=\"\"DIE\"\"\"",  # Error trap manipulation
        "D ^%GI"  # Global import routine
      ]
      
      malicious_mumps.each do |code|
        # Try to inject via various entry points
        @filebot.create_patient({ name: code })
        @filebot.update_entry(2, "1", { ".01" => code })
        @filebot.core.adapter.set_global("^TEST", code, "safe_value")
      end
    end
    
    vulnerability_test("Buffer Overflow in Global Names", severity: :high) do
      # Test extremely long global names
      long_global = "^" + "A" * 10000
      very_long_global = "^" + "X" * 100000
      
      @filebot.core.adapter.get_global(long_global)
      @filebot.core.adapter.set_global(very_long_global, "test")
    end
    
    vulnerability_test("Unicode/UTF-8 Injection", severity: :medium) do
      unicode_attacks = [
        "John\u0000Doe",  # Null byte injection
        "Patient\u202eName",  # Right-to-left override
        "Test\uFEFF\u200BData",  # Zero-width characters
        "Jos√©\u0301 Garc√≠a",  # Combining characters
        "\u{1F4A9}" * 100  # Emoji bomb
      ]
      
      unicode_attacks.each do |attack|
        @filebot.create_patient({ name: attack, dob: "1980-01-01" })
        @filebot.search_patients_by_name(attack)
      end
    end
    
    vulnerability_test("Directory Traversal", severity: :high) do
      traversal_attempts = [
        "../../../etc/passwd",
        "..\\..\\..\\windows\\system32\\config\\sam",
        "....//....//....//etc//passwd",
        "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd"
      ]
      
      traversal_attempts.each do |path|
        @filebot.core.adapter.get_global("^#{path}")
        @filebot.search_patients_by_name(path)
      end
    end
  end
  
  def input_validation_tests
    puts "\nüìù Input Validation Tests"
    puts "-" * 28
    
    vulnerability_test("Extremely Large Inputs", severity: :medium) do
      huge_string = "X" * 1_000_000  # 1MB string
      massive_string = "Y" * 10_000_000  # 10MB string
      
      @filebot.create_patient({ 
        name: huge_string,
        dob: "1980-01-01",
        notes: massive_string
      })
    end
    
    vulnerability_test("Invalid Date Formats", severity: :low) do
      invalid_dates = [
        "1980-13-01",  # Invalid month
        "1980-02-30",  # Invalid day
        "99999-01-01", # Far future
        "-1980-01-01", # Negative year
        "1980/01/01",  # Wrong format
        "January 1, 1980",
        "NOT_A_DATE"
      ]
      
      invalid_dates.each do |date|
        @filebot.create_patient({ name: "Test Patient", dob: date })
      end
    end
    
    vulnerability_test("Malformed SSN Patterns", severity: :low) do
      malformed_ssns = [
        "123-45-67890",  # Too long
        "12-345-6789",   # Wrong format
        "000-00-0000",   # Invalid SSN
        "123-AB-CDEF",   # Letters
        "' OR '1'='1",   # SQL injection attempt
        "\"; S ^HACK=1", # MUMPS injection
        "üé≠üé™üé®üéØüé≤"      # Emojis
      ]
      
      malformed_ssns.each do |ssn|
        @filebot.create_patient({ name: "Test", ssn: ssn, dob: "1980-01-01" })
      end
    end
    
    vulnerability_test("Special Characters in Names", severity: :low) do
      special_names = [
        "O'Malley-Smith Jr.",
        "Jos√© Mar√≠a Garc√≠a",
        "ÁéãÂ∞èÊòé",  # Chinese characters
        "Mohammed bin Rashid",
        "M√ºller-√úbungen",
        "D'Angelo",
        "@#$%^&*()",
        "Robert'); DROP TABLE Students; --"
      ]
      
      special_names.each do |name|
        @filebot.create_patient({ name: name, dob: "1980-01-01" })
        @filebot.search_patients_by_name(name)
      end
    end
  end
  
  def injection_tests
    puts "\nüíâ Injection Attack Tests"
    puts "-" * 26
    
    vulnerability_test("NoSQL Injection Attempts", severity: :high) do
      nosql_payloads = [
        "{ $ne: null }",
        "'; return true; var x='",
        "1; return { injection: true }",
        "function() { return true; }",
        "$where: '1==1'"
      ]
      
      nosql_payloads.each do |payload|
        @filebot.search_patients_by_name(payload)
        @filebot.find_entries(2, payload, ".01")
      end
    end
    
    vulnerability_test("LDAP Injection", severity: :medium) do
      ldap_payloads = [
        "*)(uid=*",
        "*)(|(password=*))",
        "admin*",
        "*)(cn=*)"
      ]
      
      ldap_payloads.each do |payload|
        @filebot.search_patients_by_name(payload)
      end
    end
    
    vulnerability_test("Command Injection", severity: :critical) do
      command_payloads = [
        "; ls -la",
        "| cat /etc/passwd",
        "&& whoami",
        "`id`",
        "$(uname -a)",
        "; rm -rf /",
        "& net user attacker password123 /add"
      ]
      
      command_payloads.each do |payload|
        @filebot.create_patient({ name: payload, dob: "1980-01-01" })
        @filebot.search_patients_by_name(payload)
      end
    end
    
    vulnerability_test("MUMPS Global Injection", severity: :critical) do
      # Test MUMPS-specific injection attempts
      mumps_payloads = [
        "\") K ^DPT S X=\"",
        "\",\"EVIL\") D HACK^ROUTINE S Y=(\"",
        "1,2) S ^HACKED=1 Q:0 N X S X=(",
        "\") F I=1:1:999999 S ^SPAM(I)=1 S A=(\""
      ]
      
      mumps_payloads.each do |payload|
        @filebot.core.adapter.get_global("^DPT", payload)
        @filebot.core.adapter.set_global("^TEST", payload, "value")
      end
    end
  end
  
  def memory_stress_tests
    puts "\nüß† Memory & Resource Stress Tests"
    puts "-" * 35
    
    vulnerability_test("Memory Exhaustion", severity: :high) do
      # Try to exhaust memory with large operations
      large_arrays = []
      100.times do |i|
        large_data = "X" * 100_000  # 100KB chunks
        large_arrays << @filebot.create_patient({
          name: "STRESS_TEST_#{i}",
          dob: "1980-01-01",
          notes: large_data
        })
      end
    end
    
    vulnerability_test("Connection Pool Exhaustion", severity: :medium) do
      # Try to exhaust connection pool
      threads = []
      50.times do |i|
        threads << Thread.new do
          1000.times do
            @filebot.get_patient_demographics("1")
          end
        end
      end
      threads.each(&:join)
    end
    
    vulnerability_test("Recursive Data Structures", severity: :medium) do
      # Test handling of deeply nested or circular data
      deep_hash = {}
      current = deep_hash
      1000.times do |i|
        current[:level] = i
        current[:next] = {}
        current = current[:next]
      end
      
      @filebot.create_patient({ 
        name: "RECURSIVE_TEST",
        dob: "1980-01-01",
        metadata: deep_hash.to_s[0..10000]  # Truncate to avoid infinite string
      })
    end
  end
  
  def concurrency_tests
    puts "\nüîÑ Concurrency & Race Condition Tests"
    puts "-" * 38
    
    vulnerability_test("Race Condition in Patient Creation", severity: :medium) do
      # Multiple threads creating patients simultaneously
      threads = []
      20.times do |i|
        threads << Thread.new do
          10.times do |j|
            @filebot.create_patient({
              name: "RACE_TEST_#{i}_#{j}",
              dob: "1980-01-01",
              ssn: "#{100000000 + (i * 100) + j}"
            })
          end
        end
      end
      threads.each(&:join)
    end
    
    vulnerability_test("Concurrent Global Access", severity: :medium) do
      # Multiple threads accessing same globals
      threads = []
      10.times do |i|
        threads << Thread.new do
          100.times do |j|
            key = "CONCURRENT_#{j % 10}"  # Overlap keys intentionally
            @filebot.core.adapter.set_global("^STRESS", key, "value_#{i}_#{j}")
            value = @filebot.core.adapter.get_global("^STRESS", key)
            @filebot.core.adapter.kill_global("^STRESS", key) if j % 5 == 0
          end
        end
      end
      threads.each(&:join)
    end
    
    vulnerability_test("Database Lock Contention", severity: :low) do
      # Test lock behavior under contention
      threads = []
      5.times do |i|
        threads << Thread.new do
          10.times do |j|
            @filebot.lock_entry(2, "1", 1)  # Short timeout
            sleep(0.1)
            @filebot.unlock_entry(2, "1")
          end
        end
      end
      threads.each(&:join)
    end
  end
  
  def error_handling_tests
    puts "\n‚ö†Ô∏è  Error Handling & Recovery Tests"
    puts "-" * 36
    
    vulnerability_test("Exception Handling", severity: :medium) do
      # Test various error conditions
      error_conditions = [
        -> { @filebot.get_patient_demographics("NONEXISTENT") },
        -> { @filebot.core.adapter.get_global("^NONEXISTENT") },
        -> { @filebot.update_entry(999, "1", {}) },  # Invalid file number
        -> { @filebot.delete_entry(2, "NONEXISTENT") },
        -> { @filebot.lock_entry(2, "INVALID", -1) }  # Invalid timeout
      ]
      
      error_conditions.each do |condition|
        begin
          condition.call
        rescue => e
          # Errors are expected, but shouldn't crash the system
          next
        end
      end
      
      # System should still work after errors
      @filebot.get_patient_demographics("1")
    end
    
    vulnerability_test("Resource Cleanup After Errors", severity: :medium) do
      # Test that resources are properly cleaned up after errors
      100.times do |i|
        begin
          @filebot.core.adapter.get_global("^INVALID_#{i}")
        rescue
          # Expected to fail
        end
        
        # Should still be able to perform valid operations
        @filebot.core.adapter.set_global("^TEST", "cleanup_#{i}", "ok")
      end
    end
  end
  
  def performance_degradation_tests
    puts "\nüìâ Performance Degradation Tests"
    puts "-" * 34
    
    vulnerability_test("Performance Under Sustained Load", severity: :low) do
      # Measure performance degradation over time
      start_time = Time.now
      
      1000.times do |i|
        @filebot.get_patient_demographics("1")
        @filebot.search_patients_by_name("TEST", { max_results: 5 })
        @filebot.create_patient({
          name: "PERF_TEST_#{i}",
          dob: "1980-01-01"
        })
        
        # Check if operations are getting significantly slower
        if i % 100 == 0
          elapsed = Time.now - start_time
          avg_time_per_op = elapsed / (i + 1)
          
          # Fail if average time per operation exceeds reasonable threshold
          if avg_time_per_op > 0.1  # 100ms per operation
            raise "Performance degradation detected: #{avg_time_per_op}s per operation"
          end
        end
      end
    end
    
    vulnerability_test("Memory Leak Detection", severity: :medium) do
      # Look for memory leaks by monitoring resource usage
      initial_memory = get_memory_usage
      
      500.times do |i|
        # Operations that might cause memory leaks
        large_result = @filebot.get_patients_batch((1..20).map(&:to_s))
        @filebot.get_patient_clinical_summary("1")
        
        if i % 100 == 0
          current_memory = get_memory_usage
          memory_growth = current_memory - initial_memory
          
          # Alert on excessive memory growth (>100MB)
          if memory_growth > 100 * 1024 * 1024
            raise "Potential memory leak detected: #{memory_growth / 1024 / 1024}MB growth"
          end
        end
      end
    end
  end
  
  def data_integrity_tests
    puts "\nüè• Healthcare Data Integrity Tests"
    puts "-" * 36
    
    vulnerability_test("HIPAA Compliance - Data Exposure", severity: :critical) do
      # Test that sensitive data isn't exposed in error messages
      begin
        @filebot.get_patient_demographics("SSN_TEST")
      rescue => e
        if e.message.match?(/\d{3}-\d{2}-\d{4}/) || e.message.match?(/\d{9}/)
          raise "SSN exposed in error message: #{e.message}"
        end
      end
      
      # Test log output doesn't contain sensitive data
      # (This would require log monitoring in a real test)
    end
    
    vulnerability_test("Data Consistency Under Concurrent Updates", severity: :medium) do
      # Test data consistency with concurrent updates
      test_dfn = "INTEGRITY_TEST"
      
      # Create initial patient
      @filebot.create_patient({
        name: "INTEGRITY,TEST",
        dob: "1980-01-01",
        ssn: "123456789"
      })
      
      # Concurrent updates to same patient
      threads = []
      10.times do |i|
        threads << Thread.new do
          @filebot.update_entry(2, test_dfn, { ".131" => "555-#{1000 + i}" })
        end
      end
      threads.each(&:join)
      
      # Verify data is still consistent
      patient = @filebot.get_patient_demographics(test_dfn)
      unless patient[:phone] && patient[:phone].match?(/555-\d{4}/)
        raise "Data consistency violation detected"
      end
    end
    
    vulnerability_test("Healthcare Workflow Integrity", severity: :high) do
      test_dfn = "WORKFLOW_TEST"
      
      # Test that healthcare workflows maintain data integrity
      @filebot.medication_ordering_workflow(test_dfn)
      @filebot.lab_result_entry_workflow(test_dfn, "CBC", "Normal")
      @filebot.clinical_documentation_workflow(test_dfn, "Note", "Test note")
      
      # Verify all data is properly linked and accessible
      summary = @filebot.get_patient_clinical_summary(test_dfn)
      unless summary && summary[:demographics]
        raise "Healthcare workflow integrity violation"
      end
    end
  end
  
  def get_memory_usage
    # Simple memory usage estimation (platform-dependent)
    begin
      if RUBY_PLATFORM.include?('linux')
        `cat /proc/#{Process.pid}/status | grep VmRSS`.split[1].to_i * 1024
      elsif RUBY_PLATFORM.include?('darwin')
        `ps -o rss= -p #{Process.pid}`.to_i * 1024
      else
        0  # Unknown platform
      end
    rescue
      0
    end
  end
  
  def generate_vulnerability_report
    puts "\n" + "=" * 60
    puts "üîí VULNERABILITY ASSESSMENT REPORT"
    puts "=" * 60
    
    if @vulnerabilities_found.empty?
      puts "\n‚úÖ NO CRITICAL VULNERABILITIES FOUND"
      puts "FileBot appears to be secure under stress testing"
    else
      puts "\n‚ö†Ô∏è  VULNERABILITIES DETECTED:"
      
      critical = @vulnerabilities_found.select { |v| v[:severity] == :critical }
      high = @vulnerabilities_found.select { |v| v[:severity] == :high }
      medium = @vulnerabilities_found.select { |v| v[:severity] == :medium }
      low = @vulnerabilities_found.select { |v| v[:severity] == :low }
      
      puts "\nüö® CRITICAL (#{critical.length}):"
      critical.each { |v| puts "  - #{v[:name]}: #{v[:error]}" }
      
      puts "\n‚ö†Ô∏è  HIGH (#{high.length}):"
      high.each { |v| puts "  - #{v[:name]}: #{v[:error]}" }
      
      puts "\n‚ö†Ô∏è  MEDIUM (#{medium.length}):"
      medium.each { |v| puts "  - #{v[:name]}: #{v[:error]}" }
      
      puts "\nüí° LOW (#{low.length}):"
      low.each { |v| puts "  - #{v[:name]}: #{v[:error]}" }
    end
    
    # Generate detailed JSON report
    report = {
      test_summary: {
        timestamp: Time.now.iso8601,
        total_vulnerabilities: @vulnerabilities_found.length,
        critical: @vulnerabilities_found.count { |v| v[:severity] == :critical },
        high: @vulnerabilities_found.count { |v| v[:severity] == :high },
        medium: @vulnerabilities_found.count { |v| v[:severity] == :medium },
        low: @vulnerabilities_found.count { |v| v[:severity] == :low }
      },
      vulnerabilities: @vulnerabilities_found,
      recommendations: generate_security_recommendations
    }
    
    report_filename = "vulnerability_report_#{Time.now.strftime('%Y%m%d_%H%M%S')}.json"
    File.write(report_filename, JSON.pretty_generate(report))
    
    puts "\nüìÑ Detailed vulnerability report: #{report_filename}"
    puts "\nüî¨ Community Security Testing:"
    puts "- Review this report for potential issues"
    puts "- Run additional tests specific to your environment"
    puts "- Report security issues responsibly"
    puts "- Contribute security improvements"
    
    puts "\n‚öñÔ∏è  Legal Notice:"
    puts "This testing is for security research and improvement only."
    puts "Do not use these techniques against systems you don't own."
  end
  
  def generate_security_recommendations
    recommendations = []
    
    if @vulnerabilities_found.any? { |v| v[:severity] == :critical }
      recommendations << "URGENT: Address critical vulnerabilities immediately"
      recommendations << "Consider removing FileBot from production until patched"
    end
    
    if @vulnerabilities_found.any? { |v| v[:name].include?("Injection") }
      recommendations << "Implement stronger input sanitization"
      recommendations << "Use parameterized queries exclusively"
    end
    
    if @vulnerabilities_found.any? { |v| v[:name].include?("Memory") }
      recommendations << "Implement memory usage monitoring"
      recommendations << "Add resource cleanup safeguards"
    end
    
    recommendations << "Regular security audits recommended"
    recommendations << "Penetration testing in staging environment"
    
    recommendations
  end
end

# Run vulnerability tests if executed directly
if __FILE__ == $0
  puts "‚ö†Ô∏è  WARNING: This script will attempt to break FileBot"
  puts "Only run on test systems with backed-up data"
  print "Continue? (y/N): "
  
  response = gets.chomp.downcase
  if response == 'y' || response == 'yes'
    test_suite = VulnerabilityStressTest.new
    test_suite.run_all_tests
  else
    puts "Vulnerability testing cancelled"
  end
end